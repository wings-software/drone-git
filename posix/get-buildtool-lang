#!/bin/sh

# Define language and their corresponding extensions using comma as delimiter
langs="Java:java,Python:py,JavaScript:js,TypeScript:ts,C:c,C++:cpp,C++:cxx,C++:cc,CSharp:c#,CSharp:cs,PHP:php,Golang:go,Rust:rs,Kotlin:kt,Kotlin:kts,Lua:lua,Dart:dart,Ruby:rb,Swift:swift,R:r,VBScript:vb,Groovy:groovy,Scala:scala,Perl:pl,Godot:gd,Objective-C:m,Elixir:exs,Haskell:hs,Pascal:pas,Lisp:lisp,Lisp:cl,Lisp:clj,Lisp:cljs,Julia:jl,Zig:zig,Fortran:f,Solidity:sol,Ada:adb,Erlang:erl,Erlang:hrl,F#:fs,Apex:cls,Prolog:pro,OCaml:ml,COBOL:cbl,COBOL:cob,Crystal:cr,Nim:nim,Assembly:asm,VBA:vba,Shell:sh,Shell:bash,PowerShell:ps1,SQL:sql,HTML:html,HTML:htm,CSS:css"

# Function to detect languages based on file extensions in the given directory and its subdirectories
detect_languages() {
    repo_path="$1"
    detected_langs=""

    # Get all file extensions in the repository
    files=$(find "$repo_path" -type f -maxdepth 7 -not -path '*/\.*' 2>/dev/null | sed -E 's/.*\.(.*)$/\1/' | sort | uniq)

    # Process the langs variable without subshells
    lang_exts=$(echo "$langs" | tr ',' '\n')
    for lang_ext in $lang_exts; do
        # Split the language and extension by the colon ':'
        lang=$(echo "$lang_ext" | cut -d: -f1)
        ext=$(echo "$lang_ext" | cut -d: -f2)

        # Check if the extension is in the list of file extensions found in the repo
        if echo "$files" | grep -qw "$ext"; then
            # Add the language to the detected languages list
            if [ -z "$detected_langs" ]; then
                detected_langs="$lang"
            else
                detected_langs="$detected_langs,$lang"
            fi
        fi
    done

    # Output the detected languages
    echo "$detected_langs"
}

# Function to detect build tools
detect_build_tool() {
    repo_path="$1"
    build_tool=""

    # Check for common build tool files
    if [ -f "$repo_path/pom.xml" ]; then
        build_tool="Maven"
    elif [ -f "$repo_path/build.gradle" ]; then
        build_tool="Gradle"
    elif [ -f "$repo_path/package.json" ]; then
        build_tool="Node"
    elif [ -f "$repo_path/yarn.lock" ]; then
        build_tool="Yarn"
    elif [ -f "$repo_path/go.mod" ]; then
        build_tool="Go"
    elif [ -f "$repo_path/WORKSPACE" ]; then
        build_tool="Bazel"
    elif [ -f "$repo_path"/*.csproj ]; then
        build_tool="Dotnet"
    fi
    
    # Check for Android
    if [ -f "$repo_path/AndroidManifest.xml" ] || \
       [ -d "$repo_path/android" ] || \
       ([ -f "$repo_path/build.gradle" ] && grep -q "com\.android\.tools\.build" "$repo_path/build.gradle") || \
       ([ -f "$repo_path/app/build.gradle" ] && grep -q "com\.android\.application\|android {" "$repo_path/app/build.gradle"); then
        if [ -z "$build_tool" ]; then
            build_tool="Android"
        else
            build_tool="$build_tool,Android"
        fi
    fi
    
    # Check for iOS
    if ([ -d "$repo_path/ios" ] && find "$repo_path/ios" -name "*.pbxproj" | grep -q .) || \
       (find "$repo_path" -name "*.xcodeproj" -o -name "*.xcworkspace" | grep -q . && \
        find "$repo_path" -name "Info.plist" | grep -q .); then
        if [ -z "$build_tool" ]; then
            build_tool="iOS"
        else
            build_tool="$build_tool,iOS"
        fi
    fi
    
    # Check for React Native
    if ([ -f "$repo_path/package.json" ] && grep -q '"react-native"' "$repo_path/package.json") && \
       ([ -f "$repo_path/App.js" ] || [ -f "$repo_path/index.js" ] || \
        [ -d "$repo_path/ios" ] && [ -d "$repo_path/android" ]); then
        if [ -z "$build_tool" ]; then
            build_tool="ReactNative"
        else
            build_tool="$build_tool,ReactNative"
        fi
    fi
    
    # Check for Flutter
    if ([ -f "$repo_path/pubspec.yaml" ] && grep -q 'flutter:' "$repo_path/pubspec.yaml") || \
       ([ -f "$repo_path/pubspec.yml" ] && grep -q 'flutter:' "$repo_path/pubspec.yml") || \
       ([ -d "$repo_path/ios" ] && [ -d "$repo_path/android" ] && \
        find "$repo_path" -name "*.dart" | grep -q . && \
        ([ -d "$repo_path/lib" ] || [ -f "$repo_path/.metadata" ] && grep -q 'flutter' "$repo_path/.metadata")); then
        if [ -z "$build_tool" ]; then
            build_tool="Flutter"
        else
            build_tool="$build_tool,Flutter"
        fi
    fi
    
    # Check for Fastlane
    if [ -f "$repo_path/fastlane/Fastfile" ] || \
       ([ -d "$repo_path/fastlane" ] && [ -f "$repo_path/Gemfile" ] && grep -q 'fastlane' "$repo_path/Gemfile"); then
        if [ -z "$build_tool" ]; then
            build_tool="Fastlane"
        else
            build_tool="$build_tool,Fastlane"
        fi
    fi
    
    # Check for Jest
    if [ -f "$repo_path/jest.config.js" ] || [ -f "$repo_path/jest.config.ts" ] || ([ -f "$repo_path/package.json" ] && grep -q '"jest"' "$repo_path/package.json"); then
        if [ -z "$build_tool" ]; then
            build_tool="Jest"
        else
            build_tool="$build_tool,Jest"
        fi
    fi
    
    # Check for Cypress
    if [ -f "$repo_path/cypress.json" ] || [ -f "$repo_path/cypress.config.js" ] || [ -d "$repo_path/cypress" ] || ([ -f "$repo_path/package.json" ] && grep -q '"cypress"' "$repo_path/package.json"); then
        if [ -z "$build_tool" ]; then
            build_tool="Cypress"
        else
            build_tool="$build_tool,Cypress"
        fi
    fi

    # Return the detected build tool
    echo "$build_tool"
}

# Define the repo path (default to current directory if not provided)
repo_path="${1:-./}"

# Detect languages and build tools
HARNESS_LANG=$(detect_languages "$repo_path")
HARNESS_BUILD_TOOL=$(detect_build_tool "$repo_path")

# Create a JSON structure
json_content=$(cat <<EOF
{
  "harness_lang": "$HARNESS_LANG",
  "harness_build_tool": "$HARNESS_BUILD_TOOL"
}
EOF
)

# Output the JSON content to the specified file
echo "$json_content" > "$PLUGIN_BUILD_TOOL_FILE"