#!/bin/sh

set -e

# if PLUGIN_ONLY_COPY_FILE_CONTENT is set, only copy the file content
if [ "$PLUGIN_ONLY_COPY_FILE_CONTENT" = "true" ]; then
	copy-file-content
	exit 0
fi

# force the home directory path.
if [ "$HOME" != "/home/drone" ]; then
	if [ -d "/home/drone" ]; then
		echo "[DEBUG] setting default home directory"
		export HOME=/home/drone
	fi
fi

if [ ! -z "${DRONE_WORKSPACE}" ]; then
	mkdir -p ${DRONE_WORKSPACE}
	cd ${DRONE_WORKSPACE}
fi

# if the netrc enviornment variables exist, write
# the netrc file.

if [ ! -z "${DRONE_NETRC_MACHINE}" ]; then
	cat <<EOF > ${HOME}/.netrc
machine ${DRONE_NETRC_MACHINE}
login ${DRONE_NETRC_USERNAME}
password ${DRONE_NETRC_PASSWORD}
EOF
fi

# if the ssh_key environment variable exists, write
# the ssh key and add the netrc machine to the
# known hosts file.

if [ ! -z "${DRONE_SSH_KEY}" ]; then
	echo "DEBUG: Setting up SSH key and configuration"

	mkdir -p ${HOME}/.ssh
	echo "$DRONE_SSH_KEY" > ${HOME}/.ssh/id_rsa
	chmod 600 ${HOME}/.ssh/id_rsa
	echo "DEBUG: SSH key file created and permissions set"

	touch ${HOME}/.ssh/known_hosts
	chmod 600 ${HOME}/.ssh/known_hosts
	echo "DEBUG: Known hosts file initialized and permissions set"

	SSH_PORT_FLAG=""
	if [ ! -z "${DRONE_NETRC_PORT}" ]; then
		SSH_PORT_FLAG="-p ${DRONE_NETRC_PORT}"
		echo "DEBUG: SSH port flag set to ${SSH_PORT_FLAG}"
	fi

	SSH_KEYSCAN_TIMEOUT_FLAG=""
	if [ ! -z "${PLUGIN_SSH_KEYSCAN_TIMEOUT}" ]; then
		SSH_KEYSCAN_TIMEOUT_FLAG="-T ${PLUGIN_SSH_KEYSCAN_TIMEOUT}"
		echo "DEBUG: SSH keyscan timeout flag set to ${SSH_KEYSCAN_TIMEOUT_FLAG}"
	fi

	echo "DEBUG: Scanning SSH keys for ${DRONE_NETRC_MACHINE}"
	ssh-keyscan -H ${SSH_PORT_FLAG} ${SSH_KEYSCAN_TIMEOUT_FLAG} ${DRONE_NETRC_MACHINE} > ${HOME}/.ssh/known_hosts 2> /dev/null
	echo "DEBUG: SSH keyscan complete"

	# Check if DRONE_SSH_PASSPHRASE is set, then start ssh-agent and add key with passphrase
	if [ ! -z "${DRONE_SSH_PASSPHRASE}" ]; then
		echo "DEBUG: DRONE_SSH_PASSPHRASE detected, starting ssh-agent"
		eval $(ssh-agent -s)
		echo "${DRONE_SSH_PASSPHRASE}" | ssh-add ${HOME}/.ssh/id_rsa
		echo "DEBUG: SSH key added to ssh-agent with passphrase"
	else
		echo "DEBUG: No passphrase detected, skipping ssh-agent setup"
	fi

	# Set GIT_SSH_COMMAND to use ssh-agent or direct SSH key without passphrase
	export GIT_SSH_COMMAND="ssh -o UserKnownHostsFile=${HOME}/.ssh/known_hosts -F /dev/null ${SSH_PORT_FLAG}"
	echo "DEBUG: GIT_SSH_COMMAND set for SSH operations"
fi


# AWS codecommit support using AWS access key & secret key
# Refer: https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-https-unixes.html

if [ ! -z "$DRONE_AWS_ACCESS_KEY" ]; then
	aws configure set aws_access_key_id $DRONE_AWS_ACCESS_KEY
	aws configure set aws_secret_access_key $DRONE_AWS_SECRET_KEY
	aws configure set default.region $DRONE_AWS_REGION

	git config --global credential.helper '!aws codecommit credential-helper $@'
	git config --global credential.UseHttpPath true
fi

# configure git global behavior and parameters via the
# following environment variables:


if [ -z "${DRONE_COMMIT_AUTHOR_NAME}" ]; then
	export DRONE_COMMIT_AUTHOR_NAME=drone
fi

if [ -z "${DRONE_COMMIT_AUTHOR_EMAIL}" ]; then
	export DRONE_COMMIT_AUTHOR_EMAIL=drone@localhost
fi

export GIT_AUTHOR_NAME=${DRONE_COMMIT_AUTHOR_NAME}
export GIT_AUTHOR_EMAIL=${DRONE_COMMIT_AUTHOR_EMAIL}
export GIT_COMMITTER_NAME=${DRONE_COMMIT_AUTHOR_NAME}
export GIT_COMMITTER_EMAIL=${DRONE_COMMIT_AUTHOR_EMAIL}

# invoke the sub-script based on the drone event type.
# TODO we should ultimately look at the ref, since
# we need something compatible with deployment events.

CLONE_TYPE=$DRONE_BUILD_EVENT
case $DRONE_COMMIT_REF in
  refs/tags/* ) CLONE_TYPE=tag ;;
  refs/pull/* ) CLONE_TYPE=pull_request ;;
  refs/pull-request/* ) CLONE_TYPE=pull_request ;;
  refs/merge-requests/* ) CLONE_TYPE=pull_request ;;
esac

common

case $CLONE_TYPE in
pull_request)
	clone-pull-request
	;;
tag)
	clone-tag
	;;
*)
	clone-commit
	;;
esac

post-fetch

copy-file-content